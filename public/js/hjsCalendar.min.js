function hjsCalendar(e) {
    document.getElementById("hjsCalendar").innerHTML = '<div class=""><div class="justify-content-center d-md-flex"><div class="bg-white left"><div class="bg-white calendar mx-auto pb-2 px-2"><div class="d-flex align-items-center justify-content-between text-uppercase pt-3 month py-4"><div class="fw-bold text-dark ms-3"id=date></div><div class="d-flex align-items-center justify-content-center gap-3"><div class="d-flex align-items-center justify-content-center rounded-circle"id=prev><i class="fa fa-angle-left"></i></div><div class="d-flex align-items-center justify-content-center rounded-circle"id=nxt><i class="fa fa-angle-right"></i></div></div></div><div class="d-flex align-items-center justify-content-between text-uppercase fw-light h-100 mb-2 text-sm w-100 weekdays"><div class=fw-medium>Dom</div><div class=fw-medium>Seg</div><div class=fw-medium>Ter</div><div class=fw-medium>Qua</div><div class=fw-medium>Qui</div><div class=fw-medium>Sex</div><div class=fw-medium>Sáb</div></div><div class="d-flex justify-content-between w-100 flex-wrap"id=days></div></div></div><div class="bg-white d-none px-3 mt-4 pt-1 right"id=rightContent><div class="fw-bold text-dark text-uppercase d-flex py-5 pt-0 pb-3"id=today-date><div id=event-day>Quarta-feira,</div><div id=event-date>19 Abril</div></div><div class=text-center style=width:254px><div class="events me-4"id=meeting_daily_timings></div></div></div></div></div>', document.getElementsByClassName("calendar");

    let elementoData = document.getElementById("date"),
        elementoDias = document.getElementById("days"),
        botaoAnterior = document.getElementById("prev"),
        botaoProximo = document.getElementById("nxt"),
        elementoConteudoDireito = document.getElementById("rightContent");

    document.getElementById("activeEvent-time"),
        document.getElementById("activeConfirm-btn"),
        document.getElementsByClassName("event-time");

    let dataAtual = new Date(),
        mesAtual = dataAtual.getMonth(),
        anoAtual = dataAtual.getFullYear(),
        diaAtual = dataAtual.getDate();

    dataAtual.setMonth(dataAtual.getMonth() + 1);
    let proximoMes = dataAtual.getMonth(),
        nomesMeses = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];

    function obterDomingos(ano, mes) {
        let domingos = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 0) {
                domingos.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }

        return domingos;
    }

    function desabilitarDias() {
        let dias = document.querySelectorAll('.dia');
        dias.forEach(dia => {
            let data = new Date(dia.dataset.date);
            if (informacaoProfissional.sabado === false)
                if (data.getDay() === 0) { // Desabilita domingos e sábados
                    dia.classList.add('disabled');
                }
        });
    }

    function obterSegundas(ano, mes) {
        let segundas = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 1) {
                domingos.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }


        return segundas;
    }

    function obterTercas(ano, mes) {
        let tercas = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 2) {
                tercas.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }


        return tercas;
    }

    function obterQuartas(ano, mes) {
        let quartas = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 3) {
                quartas.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }


        return quartas;
    }

    function obterQuintas(ano, mes) {
        let quintas = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 4) {
                quintas.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }


        return quintas;
    }

    function obterSextas(ano, mes) {
        let sextas = [],
            data = new Date(ano, mes, 1);

        while (data.getMonth() === mes) {
            if (data.getDay() === 5) {
                sextas.push(data.getDate());
            }
            data.setDate(data.getDate() + 1);
        }


        return sextas;
    }

    function obterSabados(ano, mes) {
        if (informacaoProfissional.sabado === false) {
            let sabados = [],
                data = new Date(ano, mes, 1);

            while (data.getMonth() === mes) {
                if (data.getDay() === 6) {
                    sabados.push(data.getDate());
                }
                data.setDate(data.getDate() + 1);
            }


            return sabados;
        }
        return sabados;
    }

    let reunioes = {};

    function atualizarCalendario() {
        Date.now();
        let primeiroDiaDoMes = new Date(anoAtual, mesAtual, 1),
            ultimoDiaDoMes = new Date(anoAtual, mesAtual + 1, 0),
            ultimoDiaDoMesAnterior = new Date(anoAtual, mesAtual, 0),
            ultimaDataMesAnterior = ultimoDiaDoMesAnterior.getDate(),
            ultimaDataMesAtual = ultimoDiaDoMes.getDate(),
            primeiroDiaDaSemanaMesAtual = primeiroDiaDoMes.getDay(),
            diasRestantesProximoMes = 7 - ultimoDiaDoMes.getDay() - 1;

        elementoData.innerHTML = nomesMeses[mesAtual] + " " + anoAtual;

        let diasHtml = "";
        for (let i = primeiroDiaDaSemanaMesAtual; i > 0; i--) {
            diasHtml += `<div class='day prev-date'>${ultimaDataMesAnterior - i + 1}</div>`;
        }

        for (let dia = 1; dia <= ultimaDataMesAtual; dia++) {
            if (dia < new Date().getDate() && anoAtual === new Date().getFullYear() && mesAtual === new Date().getMonth() || obterDomingos(anoAtual, mesAtual).includes(dia)) {
                diasHtml += `<div class='day tillCurrentDate'> ${dia} </div>`;
            } else if (dia === new Date().getDate() && anoAtual === new Date().getFullYear() && mesAtual === new Date().getMonth()) {
                diasHtml += `<div class='day today'>${dia} </div>`;
            } else if (mesAtual === new Date().getMonth() && anoAtual === new Date().getFullYear() || mesAtual === proximoMes && anoAtual === new Date().getFullYear()) {
                diasHtml += `<div class="day">${dia}</div>`;
            } else {
                diasHtml += `<div class="day futureDays">${dia}</div>`;
            }
        }

        for (let i = 1; i <= diasRestantesProximoMes; i++) {
            diasHtml += `<div class='day nxt-date'>${i}</div>`;
        }

        elementoDias.innerHTML = diasHtml;

        function adicionarListenersDias() {
            let elementosDias = document.querySelectorAll(".day"),
                domingos = obterDomingos(anoAtual, mesAtual)
            //segundas = obterSegundas(anoAtual, mesAtual);
            //tercas = obterTercas(anoAtual, mesAtual);
            //quartas = obterQuartas(anoAtual, mesAtual);
            //quintas = obterQuintas(anoAtual, mesAtual);
            //sextas = obterSextas(anoAtual, mesAtual);
            //sabados = obterSabados(anoAtual, mesAtual);

            elementosDias.forEach(elementoDia => {
                elementoDia.addEventListener("click", evento => {
                    if (domingos.includes(Number(elementoDia.textContent))) {
                        console.log("isso é domingo");
                    } else {
                        elementosDias.forEach(diaElem => {
                            diaElem.classList.remove("active");
                        });

                        if ((anoAtual > new Date().getFullYear() || (anoAtual === new Date().getFullYear() && mesAtual >= new Date().getMonth())) && !domingos.includes(Number(elementoDia.textContent))) {
                            elementoConteudoDireito.classList.remove("d-none");

                            function definirDataEvento(alvo) {
                                let dataEvento = new Date(anoAtual, mesAtual, alvo),
                                    diaSemana = dataEvento.toLocaleString("pt-BR", { weekday: "long" });

                                elementoDiaEvento.innerHTML = diaSemana;
                                elementoDataEvento.innerHTML = ", " + nomesMeses[mesAtual] + " " + alvo;
                            }

                            definirDataEvento(evento.target.innerHTML);
                            elementoDia.classList.add("active");

                            let diaSelecionado = elementoDia.innerHTML,
                                elementoHorariosDiariosReuniao = document.getElementById("meeting_daily_timings"),
                                reunioesHtml = "",
                                classeDesabilitada = "",
                                classeBotaoDesabilitado = "";

                            for (let hora = 8; hora < 21; hora++) {
                                if (new Date(anoAtual, mesAtual, diaSelecionado, hora, 0, 0, 0).getTime() < Date.now()) {
                                    classeDesabilitada = "disabled";
                                    classeBotaoDesabilitado = "btnDisable";
                                } else {
                                    classeDesabilitada = "";
                                    classeBotaoDesabilitado = "";
                                }

                                let horaString = new Date(anoAtual, mesAtual, diaSelecionado, hora, 0, 0, 0).toLocaleString("pt-BR", { hour12: 0, hour: "numeric", minute: "numeric" });

                                if (reunioes[new Date(anoAtual, mesAtual, diaSelecionado, hora).toJSON()] > 2) {
                                    reunioesHtml += `<div class="button-full" id="prepTime_${hora}">
                  <button class="event-time meeting btnDisable" disabled > ${hora === 12 ? "12:00" : horaString}
              </button></div>`;
                                } else {
                                    reunioesHtml += `<div class="button-full" id="prepTime_${hora}">
                  <button onclick="meetTime('prepTime_${hora}')" class="event-time meeting ${classeBotaoDesabilitado}" ${classeDesabilitada} > ${hora === 12 ? "12:00" : horaString}
              </button>
                  <button onclick="confirmMeeting('${new Date(anoAtual, mesAtual, diaSelecionado, hora, 0, 0, 0).toJSON()}')" class="confirm-btn">Confirmar</button>
              </div>`;
                                }
                            }

                            elementoHorariosDiariosReuniao.innerHTML = reunioesHtml;
                        }
                    }
                });
            });
        }

        adicionarListenersDias();
    }

    atualizarCalendario();

    botaoAnterior.addEventListener("click", () => {
        if (--mesAtual < 0) {
            mesAtual = 11;
            anoAtual--;
        }
        atualizarCalendario();
    });

    botaoProximo.addEventListener("click", () => {
        if (++mesAtual > 11) {
            mesAtual = 0;
            anoAtual++;
        }
        atualizarCalendario();
    });

    let elementoReuniaoAnterior = null;

    this.meetTime = elementoId => {
        var elementoReuniao = document.getElementById(elementoId);

        if (elementoReuniaoAnterior !== null) {
            elementoReuniaoAnterior.children[0].classList.remove("activeEvent-time");
            elementoReuniaoAnterior.children[1].classList.remove("activeConfirm-btn");
        }

        elementoReuniao.children[0].classList.add("activeEvent-time");
        elementoReuniao.children[1].classList.add("activeConfirm-btn");
        elementoReuniaoAnterior = elementoReuniao;
    };

    let elementoDiaEvento = document.getElementById("event-day"),
        elementoDataEvento = document.getElementById("event-date");

    this.confirmMeeting = elemento => e(elemento);
}

$(document).ready(function () {
    $('.btnAgendarConsulta').on('click', function () {
        var medicoId = $(this).data('medico');
        var informacaoProfissional;

        $.ajax({
            url: '/informacao-profissional/' + medicoId,
            method: 'GET',
            success: function (response) {
                // Armazenar a resposta em uma variável
                informacaoProfissional = response;
                console.log(informacaoProfissional);
            },
            error: function (xhr) {
                $('#informacaoProfissional').html('<p>Erro ao buscar informações do profissional.</p>');
            }
        });
    });
});